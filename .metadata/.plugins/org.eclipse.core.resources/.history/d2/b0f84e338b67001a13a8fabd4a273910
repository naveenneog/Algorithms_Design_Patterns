package basics;

import java.time.Duration;
import java.time.Instant;

public class FibonacciNo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Pseudocode
//		function fib1(n)
//		if n = 0: return 0
//		if n = 1: return 1
//		return fib1(n − 1) + fib1(n − 2)
		//This method just fails to find the 50th Fibonacci number takes 51.6 second
		//The complexity of this algorithm goes exponential for the input
		Instant start = Instant.now();
		System.out.println("start time"+start);
		System.out.println("Print nth Fib"+fib(50));
		Instant end = Instant.now();
		System.out.println("End time"+end);
		Duration elapsedTime = Duration.between(start, end);
		System.out.println("Time taken for the computation"+elapsedTime);
	}
	
	public static int fib(int n){
		if(n == 0){ return 0;}
		else if(n == 1){ return 1;}
		else return fib(n-1) + fib(n-2);
		
	}

}

class Fibonacci_Memoisation implements Runnable{
	
	public Fibonacci_Memoisation(){
		
	}
	
	public int computeFibonacci(int x){
		int output = 0;
		int[] fn = new int[x];
		
		//Pseudocode
//		(n) function fib2
//		if n=0 return 0
//		create an array f[0 . . . n] f[0] =0,f[1] =1
//		for i = 2 . . . n:
//		f[i] = f[i − 1] + f[i − 2] return f[n]
		fn[0] = 0;
		fn[1] =1;
		for(int i = 2; i<= x ; i++){
			fn[i] = fn[i-1] + fn[i-2];
		}
		return fn[x];
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}
}
